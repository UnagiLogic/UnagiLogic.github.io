IMPORTANT RULES TO LIVE BY WHEN CODING ------------------------------
Double check that you've closed off each element.

This is just a useful guide for myself as I learn to code

Git Repository - Use these commands when you want to commit some changes to the website

git add --all
git commit -m "add a comment about the commit here"
git push -u origin main

Node server.js - Use this when you want to start your personal server on your laptop

CSS Reminders

Selector, Property          Value
P         Color:            Blue;
Body      Background-color: Orange;

//Below is a rule
.this-thing {
    color: black;
}

[WHAT I DONT UNDERSTAND]
ID Selectors:
Are like unique identifiers for each character, object, or item in the game
Are specific to a single element and cannot be used to select multiple elements
Can be used to access a specific element directly
Example: If you wanted to collect a coin with the ID coin-123, you could use the following code
var coin = document.getElementById('coin-123');

Class selectors:
Are like groups of characters, objects, or items in the game
Can be used to select multiple elements with the same class attribute
Are often used to apply styles to multiple elements at once
For example: If you wanted to collect all of the coins with the class coin, you could use the following code:
var coins = document.getElementsByClassName('coin');

[HTML]
id="thisID" Needs to be unique when used
Don't overuse these as they will help later with javascript
class="golden" Does not need to be unique
<a href="/"> [Use this to access local webpages]
<details> <summary> </summary> </details>
<figure> <figcaption> </figcaption> </figure>
<span></span> [Use this to apply styles to part of a text]


[CSS]   Example
#id     #thisID
.class  .golden
padding -   Top     Right   Bottom  Left
            12      3       6       9
            North   East    South   West
            20px    0       20px    0

To position content lower inside an element, add a top padding
p {font-family: fantasy;} [THIS_IS_A_CSS_RULE]
When you style a parent element some properties will only effect the parent
div {
    border: solid 1px black;
    padding
    margin
}
CSS Classes let us override inherited properties.
MARGIN - Increases the spacing around the element
Gain a DEEP UNDERSTADING of the basics

/* Keyword values */
flex: auto;
flex: initial;
flex: none;

/* One value, unitless number: flex-grow
flex-basis is then equal to 0. */
flex: 2;

/* One value, width/height: flex-basis */
flex: 10em;
flex: 30%;
flex: min-content;

/* Two values: flex-grow | flex-basis */
flex: 1 30px;

/* Two values: flex-grow | flex-shrink */
flex: 2 2;

/* Three values: flex-grow | flex-shrink | flex-basis */
flex: 2 2 10%;

/* Global values */
flex: inherit;
flex: initial;
flex: revert;
flex: revert-layer;
flex: unset;

initial
The item is sized according to its width and height properties. It shrinks to its minimum size to fit the container, but does not grow to absorb any extra free space in the flex container. This is equivalent to setting "flex: 0 1 auto".

auto
The item is sized according to its width and height properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container. This is equivalent to setting "flex: 1 1 auto".

none
The item is sized according to its width and height properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container. This is equivalent to setting "flex: 0 0 auto".

<'flex-grow'>
Defines the flex-grow of the flex item. Negative values are considered invalid. Defaults to 1 when omitted. (initial is 0)

<'flex-shrink'>
Defines the flex-shrink of the flex item. Negative values are considered invalid. Defaults to 1 when omitted. (initial is 1)

<'flex-basis'>
Defines the flex-basis of the flex item. A preferred size of 0 must have a unit to avoid being interpreted as a flexibility. Defaults to 0 when omitted. (initial is auto)

@keyframes: The @keyframes rule is used to define animations in CSS. It allows you to specify the keyframes of an animation, which are the points in time during the animation when certain CSS properties should be applied.

[JS]
console.log()
You can place a variable in here to log it
When you update a value, it forgets its previous value.
Adding string values together is called an expression
true; false;
! is a negation operator. It turns values into their opposite
=== checks if two numbers are the same
!== checks if a number isn't equal to another number
.innerText will make the HTML element contain the text we give it.
fish = fish + fishPerClick can be written fish += fishPerClick
The classList property of an element provides methods for adding, removing, and toggling CSS classes.

SAVE CODE HERE
//This space is for saving code. It will be deleted later.
function resourceCache() {
  let resourceCacheRandomizedNumber = Math.floor(Math.random() * 10) + 1;
  console.log(resourceCacheRandomizedNumber);
  let randomResource = Math.random();
  if (randomResource <= 0.33) {
    resources.clay += resourceCacheRandomizedNumber;
    updateResourceDisplay();
  } else if (randomResource <= 0.66) {
    resources.mud += resourceCacheRandomizedNumber;
    updateResourceDisplay();
  } else {
    resources.stone += resourceCacheRandomizedNumber;
    updateResourceDisplay();
  }
}

TEST FUNCTIONS HERE
//This space is for testing functions. It will be deleted later.

Function testFunction() {
    console.log("This is a test function");
}

//This function will increase the players energy by 1 every second
//It will also only increase the players energy if it is less than the players current max energy
function increaseEnergy() {
    if (player.energy < player.maxEnergy) {
        player.energy += 1;
        updateEnergyDisplay();
    }
}




